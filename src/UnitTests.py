#! /usr/bin/python
# coding=latin-1

from unittest import TestCase, TestSuite
import unittest
import os
import filecmp
import difflib
import sys

import utils
import regenAll

class Helpers(object):
	'''Some helper methods'''

	@staticmethod
	def fileIsEmpty(filename):
		'''Determines whether or not the file with given filename is
		empty. Returns true if the file is empty, else returns false.'''
		return os.path.getsize(filename) == 0
	
	@staticmethod
	def filesAreEqual(filename, reference_filename):
		'''Compares file with given filename (or path) to reference file
		with given filename.'''
		referenceFilePath = Helpers.getReferenceFile(reference_filename)
		return filecmp.cmp(filename, referenceFilePath)
	
	@staticmethod
	def getFileContents(filename):
		'''Returns the contents of a text file as an array
		of strings'''
		result = []
		infile= open(filename, 'rb')
		for line in infile:
			result.append(line)
		return result
		
	@staticmethod
	def getReferenceFile(reference_filename):
		'''Returns full path to reference file with specified filename.
		It is assumed that reference files are in the subdirectory 
		"referenceFiles" from the current path.'''
		return os.path.join("../data/test", reference_filename)
	
	@staticmethod
	def setToTestMode():
		'''Set regenAll to test mode'''
		Helpers.oldTestMode = utils.testmode
		utils.testmode = True
		
	@staticmethod
	def restoreTestMode():
		'''Restore regenAll testmode to old setting'''
		utils.testmode = Helpers.oldTestMode					
	

class VerifyOutputTestCase(TestCase):
	'''Test output of this version with output generated by old version'''
	
	def runTest(self):
		regenAll.main()
		
		try:
			# Some relations should be exported
			assert Helpers.filesAreEqual("../out/lijst.html", "lijst.html"), "lijst.html file differs from reference file"
			assert Helpers.filesAreEqual("../out/AbdijmuseumTenDuinen DB3-nc-78FF93.html", "AbdijmuseumTenDuinen DB3-nc-78FF93.html"), "AbdijmuseumTenDuinen DB3-nc-78FF93.html file differs from reference file"
		except Exception, e:
			assert False, "Failed to open a necessary file (Exception: %s)" % str(e)

	def setUp(self):
		Helpers.setToTestMode()
		return

	def tearDown(self):
		'''Tidy up afterwards'''
		Helpers.restoreTestMode()

def suite():
	'''Returns the full test suite in this module'''
	testCase = VerifyOutputTestCase()

	testSuite = TestSuite()
	testSuite.addTest(testCase)
	return testSuite
	
	
if __name__ == "__main__":
	unittest.main()
